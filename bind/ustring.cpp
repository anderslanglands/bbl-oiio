#include <babble>

#include <OpenImageIO/imagebuf.h>

struct ustr {
    char const* chars;
};

BBL_MODULE(oiio) {

    bbl::Class<OIIO::ustring>()
        .replace_with<ustr>()
        .ctor(bbl::Class<OIIO::ustring>::Ctor<>(), "default")
        .ctor(bbl::Class<OIIO::ustring>::Ctor<const char *>("str"), "ctor_01")
        // .ctor(bbl::Class<OIIO::ustring>::Ctor<string_view>("str"), "ctor_02")
        // .ctor(bbl::Class<OIIO::ustring>::Ctor<const char *, size_type, size_type>("str", "pos", "n"), "ctor_03")
        // .ctor(bbl::Class<OIIO::ustring>::Ctor<const char *, size_type>("str", "n"), "ctor_04")
        // .ctor(bbl::Class<OIIO::ustring>::Ctor<size_type, char>("n", "c"), "ctor_05")
        // .ctor(bbl::Class<OIIO::ustring>::Ctor<const std::string &, size_type, size_type>("str", "pos", "n"), "ctor_06")
        // .ctor(bbl::Class<OIIO::ustring>::Ctor<const ustring &, size_type, size_type>("str", "pos", "n"), "ctor_07")
        // .m(&OIIO::ustring::operator string_view)
        // .m(&OIIO::ustring::operator basic_string)
        // .m((const ustring & (OIIO::ustring::*)(const ustring &))
        //     &OIIO::ustring::assign, "assign_00")
        // .m((const ustring & (OIIO::ustring::*)(const ustring &, size_type, size_type))
        //     &OIIO::ustring::assign, "assign_01")
        // .m((const ustring & (OIIO::ustring::*)(const std::string &))
        //     &OIIO::ustring::assign, "assign_02")
        // .m((const ustring & (OIIO::ustring::*)(const std::string &, size_type, size_type))
        //     &OIIO::ustring::assign, "assign_03")
        // .m((const ustring & (OIIO::ustring::*)(const char *))
        //     &OIIO::ustring::assign, "assign_04")
        // .m((const ustring & (OIIO::ustring::*)(const char *, size_type))
        //     &OIIO::ustring::assign, "assign_05")
        // .m((const ustring & (OIIO::ustring::*)(size_type, char))
        //     &OIIO::ustring::assign, "assign_06")
        // .m((const ustring & (OIIO::ustring::*)(string_view))
        //     &OIIO::ustring::assign, "assign_07")
        // .m((const ustring & (OIIO::ustring::*)(const ustring &))
        //     &OIIO::ustring::operator=, "op_assign_00")
        // .m((const ustring & (OIIO::ustring::*)(const char *))
        //     &OIIO::ustring::operator=, "op_assign_01")
        // .m((const ustring & (OIIO::ustring::*)(const std::string &))
        //     &OIIO::ustring::operator=, "op_assign_02")
        // .m((const ustring & (OIIO::ustring::*)(string_view))
        //     &OIIO::ustring::operator=, "op_assign_03")
        // .m((const ustring & (OIIO::ustring::*)(char))
        //     &OIIO::ustring::operator=, "op_assign_04")
        .m(&OIIO::ustring::c_str)
        .m(&OIIO::ustring::data)
        // .m(&OIIO::ustring::string)
        // .m(&OIIO::ustring::clear)
        // .m(&OIIO::ustring::length)
        .m(&OIIO::ustring::hash)
        .m(&OIIO::ustring::size)
        .m(&OIIO::ustring::empty)
        // .m(&OIIO::ustring::begin)
        // .m(&OIIO::ustring::end)
        // .m(&OIIO::ustring::rbegin)
        // .m(&OIIO::ustring::rend)
        // .m(&OIIO::ustring::operator[], "op_index")
        // .m(&OIIO::ustring::copy)
        // .m(&OIIO::ustring::substr)
        // .m((size_type (OIIO::ustring::*)(const ustring &, size_type) const)
        //     &OIIO::ustring::find, "find_00")
        // .m((size_type (OIIO::ustring::*)(const std::string &, size_type) const)
        //     &OIIO::ustring::find, "find_01")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type, size_type) const)
        //     &OIIO::ustring::find, "find_02")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type) const)
        //     &OIIO::ustring::find, "find_03")
        // .m((size_type (OIIO::ustring::*)(char, size_type) const)
        //     &OIIO::ustring::find, "find_04")
        // .m((size_type (OIIO::ustring::*)(const ustring &, size_type) const)
        //     &OIIO::ustring::rfind, "rfind_00")
        // .m((size_type (OIIO::ustring::*)(const std::string &, size_type) const)
        //     &OIIO::ustring::rfind, "rfind_01")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type, size_type) const)
        //     &OIIO::ustring::rfind, "rfind_02")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type) const)
        //     &OIIO::ustring::rfind, "rfind_03")
        // .m((size_type (OIIO::ustring::*)(char, size_type) const)
        //     &OIIO::ustring::rfind, "rfind_04")
        // .m((size_type (OIIO::ustring::*)(const ustring &, size_type) const)
        //     &OIIO::ustring::find_first_of, "find_first_of_00")
        // .m((size_type (OIIO::ustring::*)(const std::string &, size_type) const)
        //     &OIIO::ustring::find_first_of, "find_first_of_01")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type, size_type) const)
        //     &OIIO::ustring::find_first_of, "find_first_of_02")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type) const)
        //     &OIIO::ustring::find_first_of, "find_first_of_03")
        // .m((size_type (OIIO::ustring::*)(char, size_type) const)
        //     &OIIO::ustring::find_first_of, "find_first_of_04")
        // .m((size_type (OIIO::ustring::*)(const ustring &, size_type) const)
        //     &OIIO::ustring::find_last_of, "find_last_of_00")
        // .m((size_type (OIIO::ustring::*)(const std::string &, size_type) const)
        //     &OIIO::ustring::find_last_of, "find_last_of_01")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type, size_type) const)
        //     &OIIO::ustring::find_last_of, "find_last_of_02")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type) const)
        //     &OIIO::ustring::find_last_of, "find_last_of_03")
        // .m((size_type (OIIO::ustring::*)(char, size_type) const)
        //     &OIIO::ustring::find_last_of, "find_last_of_04")
        // .m((size_type (OIIO::ustring::*)(const ustring &, size_type) const)
        //     &OIIO::ustring::find_first_not_of, "find_first_not_of_00")
        // .m((size_type (OIIO::ustring::*)(const std::string &, size_type) const)
        //     &OIIO::ustring::find_first_not_of, "find_first_not_of_01")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type, size_type) const)
        //     &OIIO::ustring::find_first_not_of, "find_first_not_of_02")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type) const)
        //     &OIIO::ustring::find_first_not_of, "find_first_not_of_03")
        // .m((size_type (OIIO::ustring::*)(char, size_type) const)
        //     &OIIO::ustring::find_first_not_of, "find_first_not_of_04")
        // .m((size_type (OIIO::ustring::*)(const ustring &, size_type) const)
        //     &OIIO::ustring::find_last_not_of, "find_last_not_of_00")
        // .m((size_type (OIIO::ustring::*)(const std::string &, size_type) const)
        //     &OIIO::ustring::find_last_not_of, "find_last_not_of_01")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type, size_type) const)
        //     &OIIO::ustring::find_last_not_of, "find_last_not_of_02")
        // .m((size_type (OIIO::ustring::*)(const char *, size_type) const)
        //     &OIIO::ustring::find_last_not_of, "find_last_not_of_03")
        // .m((size_type (OIIO::ustring::*)(char, size_type) const)
        //     &OIIO::ustring::find_last_not_of, "find_last_not_of_04")
        // .m((int (OIIO::ustring::*)(string_view) const)
        //     &OIIO::ustring::compare, "compare_00")
        // .m((int (OIIO::ustring::*)(const char *) const)
        //     &OIIO::ustring::compare, "compare_01")
        .m((bool (OIIO::ustring::*)(const OIIO::ustring &) const)
            &OIIO::ustring::operator==, "op_eq_00")
        // .m((bool (OIIO::ustring::*)(const std::string &) const)
        //     &OIIO::ustring::operator==, "op_eq_01")
        // .m((bool (OIIO::ustring::*)(string_view) const)
        //     &OIIO::ustring::operator==, "op_eq_02")
        // .m((bool (OIIO::ustring::*)(const char *) const)
        //     &OIIO::ustring::operator==, "op_eq_03")
        .m((bool (OIIO::ustring::*)(const OIIO::ustring &) const)
            &OIIO::ustring::operator!=, "op_neq_00")
        // .m((bool (OIIO::ustring::*)(const std::string &) const)
        //     &OIIO::ustring::operator!=, "op_neq_01")
        // .m((bool (OIIO::ustring::*)(string_view) const)
        //     &OIIO::ustring::operator!=, "op_neq_02")
        .m((bool (OIIO::ustring::*)(const char *) const)
            &OIIO::ustring::operator!=, "op_neq_03")
        .m(&OIIO::ustring::operator<, "op_lt")
        /** TODO: instantiate this template
        .m(&OIIO::ustring::sprintf)
        */
        /** TODO: instantiate this template
        .m(&OIIO::ustring::fmtformat)
        */
        /** TODO: instantiate this template
        .m(&OIIO::ustring::format)
        */
        // .m(&OIIO::ustring::concat)
        .m(&OIIO::ustring::getstats)
        .m(&OIIO::ustring::memory)
        .m(&OIIO::ustring::total_ustrings)
        .m(&OIIO::ustring::hash_collisions)
        .m(&OIIO::ustring::make_unique)
        .m(&OIIO::ustring::is_unique)
        .m(&OIIO::ustring::from_unique)
    ;
}
